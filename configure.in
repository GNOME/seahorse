dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)

dnl ****************************************************************************
dnl MAIN SEAHORSE VERSION (update after release)

AC_INIT(seahorse, 1.0.2)

dnl ****************************************************************************
dnl LIBCRYPTUI libtool versioning
dnl CURRENT : REVISION : AGE
dnl   +1    :     0    : +1   == new interface that does not break old one.
dnl   +1    :     0    :  0   == removed an interface. Breaks old apps.
dnl    ?    :    +1    :  ?   == internal changes that doesn't break anything.

LIBCRYPTUI_CURRENT=0
LIBCRYPTUI_REVISION=0
LIBCRYPTUI_AGE=0

dnl ****************************************************************************

AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CONFIG_MACRO_DIR([m4])

AC_PROG_INTLTOOL([0.35.0])
AM_PROG_LIBTOOL
AM_GCONF_SOURCE_2
GNOME_DOC_INIT

dnl Get the off_t size right
AC_SYS_LARGEFILE
AC_TYPE_OFF_T
AC_FUNC_FSEEKO

AC_CHECK_FUNCS(setresuid setresgid)
AC_CHECK_FUNCS(strsep)
AC_CHECK_FUNCS(mlock)
SEAHORSE_CHECK_MLOCK()

PKG_CHECK_MODULES(SEAHORSE, libgnome-2.0 >= 2.14 libgnomeui-2.0 
                  libglade-2.0 gconf-2.0 gtk+-2.0 >= 2.10.0 gnome-vfs-2.0)

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-cygwin*|*-*-mingw*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test "$os_win32" = "yes")

if test "$platform_win32" = "yes" ; then
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version -no-undefined"
else
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
fi
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)

dnl *********************
dnl Accepted GPG versions
dnl *********************
AC_ARG_ENABLE(gpg-check, 
	AC_HELP_STRING([--disable-gpg-check], [check GPG version (default is yes)]),
	DO_CHECK=$enableval, DO_CHECK=yes)
	
if test	"$DO_CHECK" = "yes"; then
  accepted_versions="1.2 1.4"
  AC_PATH_PROG(GNUPG, gpg, no)
  ok="no"
  if test "$GNUPG" != "no"; then
    AC_MSG_CHECKING(for appropriate GnuPG version)
    gnupg_version=`$GNUPG --version | grep gpg`
    major=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
    minor=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
    micro=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`
    
    for ver in $accepted_versions; do
      if test "$ver" = "$major.$minor"; then
        AC_DEFINE_UNQUOTED(GPG_MAJOR, [$major], [GPG Major Version])
        AC_DEFINE_UNQUOTED(GPG_MINOR, [$minor], [GPG Minor Version])
        ok="yes"
        break
      fi
    done
    
  fi
  
  if test "$ok" = "yes"; then
	AC_MSG_RESULT([yes])
  else
	AC_MSG_ERROR([Appropriate version of GnuPG not found. Please install one of versions: $accepted_versions])
  fi

fi


dnl **********
dnl GPGME
dnl **********

ok="no"
min_gpgme_version=1.0.0
AC_PATH_PROG(GPGME_CONFIG, gpgme-config, "failed")
if test $GPGME_CONFIG != "failed" ; then
      AC_MSG_CHECKING(for GPGME - version >= $min_gpgme_version)
      req_major=`echo $min_gpgme_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
      req_minor=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
      req_micro=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
      gpgme_config_version=`$GPGME_CONFIG --version`
      major=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
      minor=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
      micro=`echo $gpgme_config_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`

	if test "$major" -eq "$req_major"; then
	   if test "$minor" -ge "$req_minor"; then
	     if test "$micro" -ge "$req_micro"; then
	       ok="yes"
	     fi
	   fi
	fi
fi

if test $ok = "yes"; then
  GPGME_CFLAGS=`$GPGME_CONFIG --cflags`
  GPGME_LIBS=`$GPGME_CONFIG --libs`
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR(GPGME $min_gpgme_version or later needed)
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GPGME_CFLAGS -O0"
SEAHORSE_LIBS="$SEAHORSE_LIBS $GPGME_LIBS"


dnl ***************
dnl LDAP [from gpg]
dnl ***************

AC_MSG_CHECKING([LDAP keyserver support])
AC_ARG_ENABLE(ldap,
[  --disable-ldap          disable LDAP keyserver interface],
    try_ldap=$enableval, try_ldap=yes)
AC_MSG_RESULT($try_ldap)
with_ldap=no

dnl Must check for network library requirements before doing link tests
dnl for ldap, for example. If ldap libs are static (or dynamic and without
dnl ELF runtime link paths), then link will fail and LDAP support won't
dnl be detected.

AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname,
	[NETLIBS="-lnsl $NETLIBS"]))
AC_CHECK_FUNC(setsockopt, , AC_CHECK_LIB(socket, setsockopt,
	[NETLIBS="-lsocket $NETLIBS"]))
	
dnl Try and link a LDAP test program to weed out unusable LDAP
dnl libraries.  -lldap [-llber [-lresolv]] is for OpenLDAP.  OpenLDAP in
dnl general is terrible with creating weird dependencies.  If all else
dnl fails, the user can play guess-the-dependency by using something
dnl like LDAP_LIBS="-lfoo" ./configure

if test "$try_ldap" = yes ; then
  for MY_LDAPLIBS in ${LDAP_LIBS+"$LDAP_LIBS"} "-lldap" "-lldap -llber" "-lldap -llber -lresolv"; do
    _ldap_save_libs=$LIBS
    LIBS="$MY_LDAPLIBS $NETLIBS $LIBS"

    AC_MSG_CHECKING([whether LDAP via \"$MY_LDAPLIBS\" is present and sane])
    AC_TRY_LINK([#include <ldap.h>],[ldap_open("foobar",1234);],
                [cv_func_ldap_init=yes],[cv_func_ldap_init=no])
    AC_MSG_RESULT([$cv_func_ldap_init])

    if test $cv_func_ldap_init = no; then
      AC_MSG_CHECKING([whether I can make LDAP be sane with lber.h])
      AC_TRY_LINK([#include <lber.h>
#include <ldap.h>],[ldap_open("foobar",1234);],
         [cv_func_ldaplber_init=yes],[cv_func_ldaplber_init=no])
      AC_MSG_RESULT([$cv_func_ldaplber_init])
    fi

    if test "$cv_func_ldaplber_init" = yes ; then
       AC_DEFINE(NEED_LBER_H,1,[Define if the LDAP library requires including lber.h before ldap.h])
    fi

    if test "$cv_func_ldap_init" = yes || \
  	test "$cv_func_ldaplber_init" = yes ; then
       LDAP_LIBS=$MY_LDAPLIBS
    fi

    LIBS=$_ldap_save_libs

    if test "$LDAP_LIBS" != ""; then 
    	with_keyserver=yes
        with_ldap=yes
		AC_DEFINE(WITH_LDAP, 1, [Support for LDAP operations])
    	break
    fi
  done
fi	

AM_CONDITIONAL(WITH_LDAP, test "$with_ldap" = "yes")
SEAHORSE_LIBS="$SEAHORSE_LIBS $LDAP_LIBS"


dnl ****************************************************************************
dnl HKP (libsoup)
dnl ****************************************************************************

# Allow hkp to be disabled 
AC_ARG_ENABLE(hkp,
        AC_HELP_STRING([--disable-hkp],
        [disable HKP keyserver interface]))

# HKP tests 
if test "$enable_hkp" = "no"; then
    echo "disabling HKP keyserver interface"
else
    
    echo "checking for supported versions of libsoup..."

    PKG_CHECK_MODULES(SOUP, libsoup-2.2, 
        [enable_hkp=yes],  
        [enable_hkp=no])

    if test "$enable_hkp" = yes; then
        with_keyserver=yes
        
        AC_DEFINE(WITH_HKP, 1, [Support for HKP operations])
        SEAHORSE_LIBS="$SEAHORSE_LIBS $SOUP_LIBS"
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $SOUP_CFLAGS"
        
        # libsoup is also used for async lookups
        AC_DEFINE(WITH_SOUP, 1, [With libsoup])
    fi
fi

AM_CONDITIONAL(WITH_HKP, test "$enable_hkp" = "yes")


dnl ***************
dnl KEYSERVER
dnl ***************

AM_CONDITIONAL(WITH_KEYSERVER, test "$with_keyserver" = "yes")

if test "$with_keyserver" = "yes"; then
	echo "enabling key server support"
	AC_DEFINE(WITH_KEYSERVER, 1, [Support for key server actions])
else
    with_keyserver=no
	echo "disabling key server support"
fi

dnl ***************
dnl NAUTILUS
dnl ***************

# Allow nautilus plugin to be disabled
AC_ARG_ENABLE(nautilus, 
	    AC_HELP_STRING([--disable-nautilus],
	    [Don't compile nautilus plugin]))

with_nautilus_ext=no

# Nautilus tests 
if test "$enable_nautilus" = "no"; then
    echo "disabling nautilus plugin"
else
    enable_nautilus=yes
    echo "enabling nautilus plugin..."
    echo "checking for supported versions of nautilus..."

    PKG_CHECK_MODULES(NAUTILUS, [libnautilus-extension >= 2.9.0 glib-2.0 >= 2.10.0],
                      [enable_nautilus=yes],[enable_nautilus=no])

    # The new Nautilus extension
    if test "$enable_nautilus" = "yes"; then
        with_nautilus_ext=yes
        AC_SUBST(NAUTILUS_CFLAGS)
        AC_SUBST(NAUTILUS_LIBS)
    fi
fi

AM_CONDITIONAL(WITH_NAUTILUS_EXT, test "$with_nautilus_ext" = "yes")


dnl ****************************************************************************
dnl AGENT
dnl ****************************************************************************

# Allow agent to be disabled
AC_ARG_ENABLE(agent, 
        AC_HELP_STRING([--disable-agent],
        [Don't compile agent for passphrase caching]))

if test "$enable_agent" = "no"; then
    echo "disabling password caching agent"
else

    enable_agent=yes
    echo "enabling password caching agent"
    
    AC_DEFINE_UNQUOTED(WITH_AGENT, 1, [Compile password caching 'agent' code])
    
    AC_SUBST([AGENT_CFLAGS])
    AC_SUBST([AGENT_LIBS])
    
fi

AM_CONDITIONAL(WITH_AGENT, test "$enable_agent" != "no")


dnl ****************************************************************************
dnl GNOME-KEYRING
dnl ****************************************************************************

# Allow agent to be compiled with gnome keyring 
AC_ARG_ENABLE(gnome_keyring,
        AC_HELP_STRING([--disable-gnome-keyring],
        [Don't compile gnome-keyring support]))

if test "$enable_gnome_keyring" = "no"; then
    echo "disabling gnome-keyring support"
else
    
    PKG_CHECK_MODULES([GNOME_KEYRING], [gnome-keyring-1],
                      [enable_gnome_keyring=yes],[enable_gnome_keyring=no])
    if test "$enable_gnome_keyring" = "yes"; then
        echo "enabling gnome-keyring support"
        
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GNOME_KEYRING_CFLAGS"
        SEAHORSE_LIBS="$SEAHORSE_LIBS $GNOME_KEYRING_LIBS"
        
        AC_DEFINE([WITH_GNOME_KEYRING],[1],[Define if gnome-keyring support is enabled])
    fi
fi

AM_CONDITIONAL(WITH_GNOME_KEYRING, test "$enable_gnome_keyring" = "yes")


dnl *******************
dnl KEY SHARING 
dnl *******************

AVAHI_GLIB_REQUIRED=0.6

# Allow sharing to be disabled
AC_ARG_ENABLE(sharing, 
        AC_HELP_STRING([--disable-sharing],
        [Don't compile in DNS-SD key sharing]))

if test "$enable_hkp" != "yes"; then
    echo "DNS-SD key sharing requires HKP support"
    enable_sharing=no
fi

if test "$enable_sharing" = "no"; then
    echo "disabling DNS-SD key sharing"
else

    PKG_CHECK_MODULES(SHARING, avahi-client avahi-glib >= $AVAHI_GLIB_REQUIRED, 
        [enable_sharing=yes],  
        [enable_sharing=no])
		
	if test "$enable_sharing" = "yes"; then
		echo "enabling key sharing"
		
		AC_DEFINE_UNQUOTED(WITH_SHARING, 1, [Compile bonjour key sharing code])
		SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $SHARING_CFLAGS"
		SEAHORSE_LIBS="$SEAHORSE_LIBS $SHARING_LIBS"
    fi
fi

AM_CONDITIONAL(WITH_SHARING, test "$enable_sharing" = "yes")


dnl ****************************************************************************
dnl DBUS
dnl ****************************************************************************

DBUS_GLIB_REQUIRED=0.35

PKG_CHECK_MODULES([DBUS], [dbus-glib-1 >= $DBUS_GLIB_REQUIRED], [enable_dbus=yes],[enable_dbus=no])
if test "$enable_dbus" = "no"; then
    AC_MSG_ERROR([dbus or dbus-glib-1 bindings not found.])
fi

AC_SUBST([DBUS_CFLAGS])
AC_SUBST([DBUS_LIBS])

AC_PATH_PROG([DBUS_BINDING_TOOL], [dbus-binding-tool], [no])
if test x$DBUS_BINDING_TOOL = "xno" ; then
    AC_MSG_ERROR([dbus-binding-tool executable not found in your path - should be installed with dbus glib bindings])
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $DBUS_CFLAGS"
SEAHORSE_LIBS="$SEAHORSE_LIBS $DBUS_LIBS"

dnl ****************************************************************************
dnl LIBCRYPTUI
dnl ****************************************************************************
   
if test "$enable_dbus" != "yes"; then
    echo "disabling libcryptui: no dbus support"
else
    
    LIBCRYPTUI_LT_RELEASE=$LIBCRYPTUI_CURRENT:$LIBCRYPTUI_REVISION:$LIBCRYPTUI_AGE
    AC_SUBST(LIBCRYPTUI_LT_RELEASE)

    LIBCRYPTUI_MAJOR=$LIBCRYPTUI_CURRENT.$LIBCRYPTUI_REVISION
    AC_SUBST(LIBCRYPTUI_MAJOR)
    
    PKG_CHECK_MODULES(LIBCRYPTUI, gtk+-2.0 >= 2.10.0 gconf-2.0)

    LIBCRYPTUI_CFLAGS="$LIBCRYPTUI_CFLAGS $DBUS_CFLAGS"
    LIBCRYPTUI_LIBS="$LIBCRYPTUI_LIBS $DBUS_LIBS" 
        
    AC_SUBST(LIBCRYPTUI_CFLAGS)
    AC_SUBST(LIBCRYPTUI_LIBS)
fi

dnl ****************************************************************************
dnl EPIPHANY
dnl ****************************************************************************

enable_epiphany=""
with_epiphany_plugin="no"

EPIPHANY_API_VERSION=2.14
EPIPHANY_REQUIRED=2.14.0
EPIPHANY_LIBXML_REQUIRED=2.6.0
EPIPHANY_LIBGLIB_REQUIRED=2.10.0
EPIPHANY_LIBGTK_REQUIRED=2.8.0

AC_SUBST([EPIPHANY_REQUIRED])
AC_SUBST([EPIPHANY_LIBXML_REQUIRED])
AC_SUBST([EPIPHANY_LIBGLIB_REQUIRED])
AC_SUBST([EPIPHANY_LIBGTK_REQUIRED])

if test "$enable_dbus" != "yes"; then
    echo "disabling gedit plugin: no dbus support"
    
else
    # Allow epiphany plugin to be disabled
    AC_ARG_ENABLE(epiphany, 
            AC_HELP_STRING([--disable-epiphany],
            [Don't enable the epiphany plugin]))

    # Epiphany tests 
    if test "$enable_epiphany" = "no"; then
        echo "disabling epiphany plugin"
    else
        enable_epiphany=yes
        echo "enabling epiphany plugin..."       
        
        GECKO_INIT([MOZILLA],[with_epiphany_plugin=yes],[with_epiphany_plugin=no])
        
        if test "$with_epiphany_plugin" = "yes"; then
            AC_SUBST([MOZILLA])
            AC_SUBST([MOZILLA_FLAVOUR])
            AC_SUBST([MOZILLA_HOME])
            AC_SUBST([MOZILLA_PREFIX])
            AC_SUBST([MOZILLA_INCLUDE_ROOT])

            case "$MOZILLA" in
            xulrunner) min_version=1.8 ;;
            *firefox) min_version=1.5 ;;
            *) AC_MSG_ERROR([Unsupported gecko "$gecko_cv_gecko"]) ;;
            esac
             
            PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY], [\
                    		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
                    		  libglade-2.0 \
                    		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
                    		  gmodule-2.0 \
                    		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
                    		  epiphany-2.18 >= $EPIPHANY_REQUIRED], 
                    		  [with_epiphany_plugin=yes E_API_VERSION=2.18],
                    		  [PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY],[\
                        		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
                        		  libglade-2.0 \
                        		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
                        		  gmodule-2.0 \
                        		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
                        		  epiphany-2.17 >= $EPIPHANY_REQUIRED], 
                        		  [with_epiphany_plugin=yes E_API_VERSION=2.17],
                        		  [PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY],[\
                            		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
                            		  libglade-2.0 \
                            		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
                            		  gmodule-2.0 \
                            		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
                            		  epiphany-2.16 >= $EPIPHANY_REQUIRED], 
                            		  [with_epiphany_plugin=yes E_API_VERSION=2.16],
                            		  [PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY],[\
                                		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
                                		  libglade-2.0 \
                                		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
                                		  gmodule-2.0 \
                                		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
                                		  epiphany-2.15 >= $EPIPHANY_REQUIRED], 
                                		  [with_epiphany_plugin=yes E_API_VERSION=2.15],
                                		  [PKG_CHECK_MODULES([EPIPHANY_DEPENDENCY],[\
                                    		  libxml-2.0 >= $EPIPHANY_LIBXML_REQUIRED \
                                    		  libglade-2.0 \
                                    		  glib-2.0 >= $EPIPHANY_LIBGLIB_REQUIRED \
                                    		  gmodule-2.0 \
                                    		  gtk+-2.0 >= $EPIPHANY_LIBGTK_REQUIRED \
                                    		  epiphany-2.14 >= $EPIPHANY_REQUIRED], 
                                    		  [with_epiphany_plugin=yes E_API_VERSION=2.14],[with_epiphany_plugin=no; echo "no"; echo "disabling epiphany plugin"])])])])])
        else
            echo "disabling epiphany plugin"
        fi
        
        if test "$with_epiphany_plugin" = "yes"; then
            PKG_CHECK_MODULES([MOZILLA_COMPONENT],
            		          [${gecko_cv_gecko}-xpcom >= $min_version $gecko_cv_extra_pkg_dependencies],
            		          [with_epiphany_plugin=yes],[with_epiphany_plugin=no echo "disabling epiphany plugin"])
        fi
        		          
        if test "$with_epiphany_plugin" = "yes"; then
            echo "enabling epiphany plugin"
            
            EPIPHANY_EXTENSION_INIT([$E_API_VERSION], [$EPIPHANY_REQUIRED])
            AC_SUBST([E_API_VERSION])
            
            AC_SUBST([EPIPHANY_DEPENDENCY_CFLAGS])
            AC_SUBST([EPIPHANY_DEPENDENCY_LIBS])
            AC_SUBST([MOZILLA_COMPONENT_CFLAGS])
            AC_SUBST([MOZILLA_COMPONENT_LIBS])
        fi
    fi
fi

AM_CONDITIONAL(WITH_EPIPHANY, test "$with_epiphany_plugin" = "yes")

dnl ****************************************************************************
dnl GEDIT
dnl ****************************************************************************

enable_gedit=""
with_gedit_plugin="no"
with_gedit_bonobo="no"

if test "$enable_dbus" != "yes"; then
    echo "disabling gedit plugin: no dbus support"
    
else

    # Allow gedit plugin to be disabled
    AC_ARG_ENABLE(gedit, 
            AC_HELP_STRING([--disable-gedit],
            [Don't compile gedit plugin]))

    # Gedit tests 
    if test "$enable_gedit" = "no"; then
        echo "disabling gedit plugin"
    else
        enable_gedit=yes
        echo "enabling gedit plugin..."
        echo "checking for supported versions of gedit..."
    
        # Gedit plugins completely changed after 2.14. 
        # - Bonobo plugins <= 2.12. 
        # - Glib type plugins > 2.13
    
	PKG_CHECK_MODULES(GEDIT, gedit-2.16 >= 2.15.0, [with_gedit_plugin=yes],
            [PKG_CHECK_MODULES(GEDIT, gedit-2.14 >= 2.13.0, [with_gedit_plugin=yes],
                [PKG_CHECK_MODULES(GEDIT, gedit-2.12 >= 2.12.0, [with_gedit_bonobo=yes],
                    [PKG_CHECK_MODULES(GEDIT, gedit-2.10 >= 2.9.0, [with_gedit_bonobo=yes], 
                        [PKG_CHECK_MODULES(GEDIT, gedit-2.8 >= 2.8.0, [with_gedit_bonobo=yes], 
                            [PKG_CHECK_MODULES(GEDIT, gedit-2.6 >= 2.6.0, [with_gedit_bonobo=yes],
                                [enable_gedit=no])])])])])])
    
        if test "$enable_gedit" = "yes"; then
            echo "enabling gedit plugin..."
            
            if test "$with_gedit_bonobo" = "yes"; then
                echo "using bonobo type gedit plugin..."
                AC_DEFINE_UNQUOTED(WITH_GEDIT_BONOBO, 1, [Use 'bonobo' type gedit plugin (for versions <= 2.12)])
            else
                echo "using glib type gedit plugin..."
            fi
        
            AC_SUBST(GEDIT_CFLAGS)
            AC_SUBST(GEDIT_LIBS)
        fi
    fi
fi

AM_CONDITIONAL(WITH_GEDIT, test "$enable_gedit" = "yes")
AM_CONDITIONAL(WITH_GEDIT_BONOBO, test "$with_gedit_bonobo" = "yes")

dnl ***************
dnl APPLET
dnl ***************

PANEL_APPLET_REQUIRED=2.9.4

enable_applet=""
with_panel_applet="no"

if test "$enable_dbus" != "yes"; then
    echo "disabling panel applet: no dbus support"
    
else

    # Allow applet to be disabled
    AC_ARG_ENABLE(applet, 
            AC_HELP_STRING([--disable-applet],
            [Don't compile clipboard encryption panel applet]))

    # Applet tests 
    if test "$enable_applet" = "no"; then
        echo "disabling panel applet"
    else
        echo "checking for supported versions of libpanelapplet..."
        
        PKG_CHECK_MODULES(GNOME_APPLETS, libpanelapplet-2.0 >= $PANEL_APPLET_REQUIRED,
                [enable_applet=yes],
                [enable_applet=no])

        if test "$enable_applet" = "yes"; then
            echo "enabling panel applet..."
            AC_SUBST(GNOME_APPLETS_CFLAGS)
            AC_SUBST(GNOME_APPLETS_LIBS)
            AC_DEFINE(WITH_APPLET, 1, [Build the clipboard encryption panel applet])
            with_panel_applet=yes
        fi
    fi
fi

AM_CONDITIONAL(WITH_APPLET, test "$enable_applet" = "yes")
   
dnl *******************
dnl LIBNOTIFY
dnl *******************

LIBNOTIFY_REQUIRED=0.3

# Allow libnotify to be disabled
AC_ARG_ENABLE(libnotify, 
        AC_HELP_STRING([--disable-libnotify],
        [Don't compile in libnotify support]))   
        
if test "x$enable_libnotify" = "xno"; then
    echo "disabling libnotify support"
else

    PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= $LIBNOTIFY_REQUIRED], 
                      enable_libnotify=yes, enable_libnotify=no)
    if test "$enable_libnotify" = "yes"; then
        
        AC_DEFINE(HAVE_LIBNOTIFY, 1, [libnotify available])
        
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $LIBNOTIFY_CFLAGS"
        SEAHORSE_LIBS="$SEAHORSE_LIBS $LIBNOTIFY_LIBS"
    fi
fi

dnl ****************************************************************************
dnl  SSH 
dnl ****************************************************************************

AC_ARG_ENABLE(ssh,
        AC_HELP_STRING([--disable-ssh], 
        [Support for managing SSH keys]))
        
if test "x$enable_ssh" = "xno"; then
    echo "disabling ssh support"
else

    AC_PATH_PROG(SSH_KEYGEN_PATH, ssh-keygen, "failed")
    AC_PATH_PROG(SSH_ADD_PATH, ssh-add, "failed")
    AC_PATH_PROG(SSH_PATH, ssh, "failed")
    
    if test $SSH_KEYGEN_PATH != "failed" && 
       test $SSH_PATH != "failed" && 
       test $SSH_ADD_PATH != "failed"; then
        enable_ssh="yes"
        AC_DEFINE(WITH_SSH, 1, [With SSH Support])
        AC_DEFINE_UNQUOTED(SSH_KEYGEN_PATH, "$SSH_KEYGEN_PATH", [Path to ssh-keygen])
        AC_DEFINE_UNQUOTED(SSH_PATH, "$SSH_PATH", [Path to ssh])
        AC_DEFINE_UNQUOTED(SSH_ADD_PATH, "$SSH_ADD_PATH", [Path to ssh-add])
    fi
    
fi

AM_CONDITIONAL(WITH_SSH, test "$enable_ssh" == "yes")


dnl ****************************************************************************

# Debug mode
AC_ARG_ENABLE(debug, 
	    AC_HELP_STRING([--enable-debug],
	    [Compile binaries in debug mode]))

if test "$enable_debug" = "yes"; then
  CFLAGS="$CFLAGS -g -O0 -Wall"
  AC_DEFINE_UNQUOTED(_DEBUG, 1, [In debug mode])
  echo "enabling debug compile mode"
else 
  dnl AC_DEFINE_UNQUOTED(G_DISABLE_ASSERT, 1, [Disable glib assertions])
  echo "disabling debug compile mode"
fi

# Fatal Messages mode
AC_ARG_ENABLE(fatal-messages, 
	    AC_HELP_STRING([--enable-fatal-messages],
	    [Don't make compile and or runtime messages fatal in debug mode.]))

if test "$enable_fatal_messages" = "yes" && test "$enable_debug" = "yes"; then
    CFLAGS="$CFLAGS -Werror"
    AC_DEFINE_UNQUOTED(FATAL_MESSAGES, 1, [Fatal runtime messages])
    echo "enabling fatal runtime messages"
fi

# Build Tests
AC_ARG_ENABLE(tests,
        AC_HELP_STRING([--enable-tests],
        [Compile Test Programs]))
        
if test "$enable_tests" != "yes"; then
    enable_tests="no"
fi

AM_CONDITIONAL(WITH_TESTS, test "$enable_tests" == "yes")

dnl ****************************************************************************

AC_SUBST(SEAHORSE_CFLAGS)
AC_SUBST(SEAHORSE_LIBS)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

AC_ARG_ENABLE(update-mime-database,
	AC_HELP_STRING([--disable-update-mime-database],
	[do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")

dnl *******************
dnl ***** gettext *****
dnl *******************

GETTEXT_PACKAGE=seahorse
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Name of the gettext domain.])

AM_GLIB_GNU_GETTEXT

dnl ****************************************************************************

AC_OUTPUT([
Makefile
seahorse.spec
libcryptui/cryptui.pc
libcryptui/Makefile
libcryptui/tests/Makefile
libseahorse/Makefile
po/Makefile.in
help/Makefile
data/Makefile
pixmaps/Makefile
pixmaps/22x22/Makefile
pixmaps/48x48/Makefile
pixmaps/scalable/Makefile
src/Makefile
src/seahorse.desktop.in
src/seahorse-pgp-encrypted.desktop.in
src/seahorse-pgp-keys.desktop.in
src/seahorse-pgp-signature.desktop.in
agent/Makefile
daemon/Makefile
plugins/Makefile
plugins/applet/Makefile
plugins/applet/docs/Makefile
plugins/epiphany/Makefile
plugins/epiphany/mozilla/Makefile
plugins/gedit/Makefile
plugins/nautilus/Makefile
plugins/nautilus-ext/Makefile
])

dnl ****************************************************************************
dnl  SUMMARY
dnl ****************************************************************************

echo "
GnuPG Version:           $gnupg_version
GPGME Version:           $gpgme_config_version
SSH Support:             $enable_ssh
gnome-keyring Support:   $enable_gnome_keyring
Keyserver Support:       $with_keyserver
  LDAP:                  $with_ldap
  HKP:                   $enable_hkp
Plugins:
  Epiphany:              $with_epiphany_plugin    
  GEdit (v <= 2.12):     $with_gedit_bonobo
  GEdit (v >= 2.14):     $with_gedit_plugin
  Panel Applet:          $with_panel_applet
  Seahorse Agent:        $enable_agent
  Nautilus:              $with_nautilus_ext
  Key Sharing:           $enable_sharing
Notification Support:    $enable_libnotify
"
